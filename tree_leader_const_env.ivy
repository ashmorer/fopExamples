#lang ivy 1.7

type node

individual e0:node #p
individual e1:node #p1
individual e2:node #p2
individual e3:node #p3
individual e4:node #q1
individual e5:node #q2
individual e6:node #q3

# true iff there is an edge between X and Y
relation edge(X:node, Y:node)

# true iff there is a path between X and Y that does not include ei (0<=i<=6)
#relation path(X:node, Y:node)

# edge is symmetric and has no self-loops
axiom edge(X,Y) -> edge(Y,X)
#axiom ~edge(X, X)

# true iff the edge between X and Y is directed X -> Y (Y is X's parent)
relation parent(X:node, Y:node)

# true iff the direction of all the parent relations on the X,Y-path is X --> Y (X has Y as an ancestor)
relation ancestor(X:node, Y:node)

# true if X is a leader
relation leader(X:node)

# true if (a) distinct(X, Y, Z) , and (b) Y is on the unique path between X and Z
relation btw(X:node, Y:node, Z:node)

#btw is symmetric
axiom (btw(X,Y,Z) -> btw(Z,Y,X))
axiom btw(X,Y,Z) -> (X~=Y & X~=Z & Y~=Z)
#axiom btw(X,Y,Z) -> ~btw(X,Z,Y)
#axiom btw(X,Y,Z) -> ~edge(X,Z)
axiom (btw(W,X,Y) & btw(W,Y,Z)) -> (btw(W,X,Z) & btw(X,Y,Z))
axiom (edge(X,Y) & edge(Y,Z) & X~=Z) -> btw(X,Y,Z)
axiom (edge(W,X) & btw(X,Y,Z) & W~=Y) -> btw(W,Y,Z)

after init
{
    assume ~parent(X,Y);
    assume ~ancestor(X, Y);
    assume ~leader(X);
}

action setLeader(p:node) = {
    if forall Z:node . (edge(p, Z) -> parent(Z, p))
    {
        leader(p) := true;
    }
}

action setParent(n1:node, n2:node) =
{
    assume edge(n1, n2) & n1 ~= n2;
    #if n2 could be n1's parent and has n2 is n1's unambiguous choice for parent.
    if ~parent(n2, n1) & forall X:node . (X ~= n2 -> (edge(X, n1) -> parent(X, n1)))  
    {
        parent(n1, n2) := true;
        ancestor(X,Y) := ancestor(X,Y) | (ancestor(X,n1) & Y=n2) | (X=n1 & ancestor(n2, Y)) | (X=n1 & Y=n2);
    }
}   

action trLoc(p:node, p1:node, p2:node, p3:node) =
{
    call setLeader(p);
    if *
    {
        if *
        {
            call setParent(p, p1);
        }   
        else
        {
            call setParent(p, p2);
        }
    }
    else
    {
        call setParent(p, p3);
    }
}


action trC(p:node, p1:node, p2:node, p3:node, q1:node, q2:node, q3:node) = {
    #the environment agrees with the given nodes;
    assume p  = e0;
    assume p1 = e1;
    assume p2 = e2;
    assume p3 = e3;
    assume q1 = e4;
    assume q2 = e5;
    assume q3 = e6;
    
    #local neighbourhood of p
    assume edge(p, p1) & edge(p, p2) & edge(p, p3);
    
    #parents are a kind of ancestor regardless of enivronment
    #this cannot be pushed to a further out context since parent is a modified predicate -- relatedly, this is exactly why it should not be here.
    #assume parent(X,Y) -> ancestor(X,Y);
   
    # Suppose we have a tree with at least one edge p->p1.
    # Let X be arbitrary. Then for each ei (0<=i<=6), there exists an X,ei-path (since we are on a connected tree).
    # Since e0~=e1, there exists an X,ej-path for some j such that X~=ej. Let Ej = {ei | X~=ei}
    # Of the Ej, select the nearest ej. Then path(X, ej) holds.
    # Why? Well, we already know X,ej-path exists. BWOC, suppose ~path(X,ej). Then btw(X,ej',ej) holds for some ej' in Ej.
    # But then ej' violates ej as nearest ej node. This contradiction shows some distinct ej must exist satisfying the path relation.
    #assume ((path(X, p)  & X ~= p) | 
    #        (path(X, p1) & X ~= p1) |  
    #        (path(X, p2) & X ~= p2) | 
    #        (path(X, p3) & X ~= p3) | 
    #        (path(X, q1) & X ~= q1) | 
    #        (path(X, q2) & X ~= q2) | 
    #        (path(X, q3) & X ~= q3));
            
    #all processes y are in neighbourhood of p, or are on p1, p2, or p3 branch of tree.
    assume  (btw(p,p1,Y) | btw(p,p2,Y) | btw(p,p3,Y) | Y=p1 | Y=p2 | Y=p3 | Y = p);
           
    #observing neighbourhood q1,q2,q3 satisfying btw
    assume btw(q1,q2,q3);
    
    
    call trLoc(p,p1,p2,p3);


    #allow environment to be arbitrary for future iterations (Ivy does this under the hood, but we make it explicit)
    e0 := *;
    e1 := *;
    e2 := *;
    e3 := *;
    e4 := *;
    e5 := *;
    e6 := *;
}

export trC



conjecture [safety] (leader(X) & leader(Y)) -> X=Y

#helpers
conjecture [oneDir] ancestor(X,Y) -> ~ancestor(Y,X)
conjecture [leadNoFollow] leader(X) -> ~ancestor(X,Y)
conjecture [ancBtw] (btw(X,Y,Z) & ancestor(Y,Z)) -> ancestor(X,Y)
conjecture [trans] (ancestor(X,Y) & ancestor(Y,Z)) -> ancestor(X,Z)

conjecture [parentAncestor] parent(X,Y) -> ancestor(X,Y)
conjecture [parentEdge] (ancestor(X,Y) & edge(X,Y)) -> parent(X,Y)
conjecture [leadLeads] (leader(X) & edge(Y,X)) -> parent(Y,X)
conjecture [ancBtw2] (ancestor(X,Z) & btw(X,Y,Z)) -> (ancestor(X,Y) & ancestor(Y,Z))
#conjecture [ancBtw3] (ancestor(W,X) & ancestor(X,Y) & btw(X,Y,Z)) -> btw(W,Y,Z)

